{"version":3,"sources":["components/Daily/Key.js","components/DList.js","components/Daily/Main.js","components/Daily/Api.js","components/Wlist.js","components/Weekly/WApi.js","App.js","serviceWorker.js","index.js"],"names":["Key","Dlilst","title","Open","rank","people","point","className","href","encodeURI","target","rel","Main_API","yesterDay","moment","subtract","format","console","log","Daily","state","daily","list","isLoading","getDaily","a","url","Axios","get","then","res","data","setState","boxOfficeResult","dailyBoxOfficeList","this","boxofficeType","showRange","map","movie","key","index","movieNm","openDt","audiAcc","showCnt","React","Component","Wilst","date","Weekly","wList","getWeekly","Wurl","weeklyBoxOfficeList","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6215854b.chunk.js","sourcesContent":["const Key = \"343e4f91240236454d41bcd82ac101cd\";\r\n\r\nexport default Key;\r\n","import React from \"react\";\r\n\r\nexport default function Dlilst({ title, Open, rank, people, point }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <div className=\"data\">\r\n        <a\r\n          href={`https://search.naver.com/search.naver?${encodeURI(\r\n            `sm=top_hty&fbm=1&ie=utf8&query=${title}`\r\n          )}`}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <h3>순 위 : {rank}</h3>\r\n          <h3>영화제목 : {title}</h3>\r\n          <h3>개봉일자 : {Open}</h3>\r\n          <h4>상영횟수 : {point}</h4>\r\n          <h4>누적관객 : {people}명</h4>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/*\r\n<ul>\r\n        <li>\r\n          <h3>순 위 : {rank}</h3>\r\n        </li>\r\n        <li>\r\n          <h3>영화제목 : {title}</h3>\r\n        </li>\r\n        <li>\r\n          <h3>개봉일자 : {Open}</h3>\r\n        </li>\r\n        <li>\r\n          <h4>영화점수 : {point}</h4>\r\n        </li>\r\n        <li>\r\n          <h4>누적관객 : {people}명</h4>\r\n        </li>\r\n      </ul>\r\n\r\n*/\r\n","const Main_API =\r\n  \"https://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/\";\r\n\r\nexport default Main_API;\r\n","import React from \"react\";\r\nimport Axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport Key from \"./Key\";\r\nimport DailyList from \"../DList\";\r\nimport Main_API from \"./Main\";\r\n\r\nimport \"./Api.css\";\r\n\r\nconst yesterDay = moment()\r\n  .subtract(1, \"d\")\r\n  .format(\"YYYYMMDD\");\r\nconsole.log(yesterDay);\r\n\r\nexport default class Daily extends React.Component {\r\n  state = {\r\n    daily: \"\",\r\n    list: [],\r\n    isLoading: true\r\n  };\r\n\r\n  getDaily = async () => {\r\n    const url = `${Main_API}searchDailyBoxOfficeList.json?key=${Key}&targetDt=${yesterDay}`;\r\n    await Axios.get(url)\r\n      .then(res => res.data)\r\n      .then(data => {\r\n        this.setState({\r\n          daily: data.boxOfficeResult,\r\n          list: data.boxOfficeResult.dailyBoxOfficeList,\r\n          isLoading: false\r\n        });\r\n        console.log(this.state.daily);\r\n        console.log(this.state.list);\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getDaily();\r\n  }\r\n  render() {\r\n    const { daily, list, isLoading } = this.state;\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader_text\">\r\n              <h2>Data Loading</h2>\r\n            </span>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"type\">\r\n              <h3>{daily.boxofficeType}</h3>\r\n            </div>\r\n            <h5>{daily.showRange}</h5>\r\n            <div className=\"movies\">\r\n              {list.map(movie => (\r\n                <DailyList\r\n                  key={movie.index}\r\n                  title={movie.movieNm}\r\n                  Open={movie.openDt}\r\n                  rank={movie.rank}\r\n                  people={movie.audiAcc}\r\n                  point={movie.showCnt}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Wilst({ title, Open, rank, people, point }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <div className=\"data\">\r\n        <a\r\n          href={`https://search.naver.com/search.naver?${encodeURI(\r\n            `sm=top_hty&fbm=1&ie=utf8&query=${title}`\r\n          )}`}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <h3>순 위 : {rank}</h3>\r\n          <h3>영화제목 : {title}</h3>\r\n          <h3>개봉일자 : {Open}</h3>\r\n          <h4>상영횟수 : {point}</h4>\r\n          <h4>누적관객 : {people}명</h4>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport Key from \"../Daily/Key\";\r\nimport Main_API from \"../Daily/Main\";\r\nimport Wilst from \"../Wlist\";\r\n\r\nimport \"./WApi.css\";\r\n\r\nconst date = moment()\r\n  .subtract(1, \"d\")\r\n  .format(\"YYYYMMDD\");\r\nconsole.log(date);\r\n\r\nexport default class Weekly extends React.Component {\r\n  state = {\r\n    Weekly: \"\",\r\n    wList: [],\r\n    isLoading: true\r\n  };\r\n\r\n  getWeekly = async () => {\r\n    const Wurl = `${Main_API}searchWeeklyBoxOfficeList.json?&key=${Key}&targetDt=${date}`;\r\n    await Axios.get(Wurl)\r\n      .then(res => res.data)\r\n      .then(data => {\r\n        this.setState({\r\n          Weekly: data.boxOfficeResult,\r\n          wList: data.boxOfficeResult.weeklyBoxOfficeList,\r\n          isLoading: false\r\n        });\r\n        console.log(this.state.Weekly);\r\n        console.log(this.state.wList);\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getWeekly();\r\n  }\r\n  render() {\r\n    const { Weekly, wList, isLoading } = this.state;\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader_text\">\r\n              <h2>Data Loading</h2>\r\n            </span>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"type\">\r\n              <h3>{Weekly.boxofficeType}</h3>\r\n            </div>\r\n            <h5>{Weekly.showRange}</h5>\r\n            <div className=\"movies\">\r\n              {wList.map(movie => (\r\n                <Wilst\r\n                  key={movie.index}\r\n                  title={movie.movieNm}\r\n                  Open={movie.openDt}\r\n                  rank={movie.rank}\r\n                  people={movie.audiAcc}\r\n                  point={movie.showCnt}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Daily from \"./components/Daily/Api\";\nimport Weekly from \"./components/Weekly/WApi\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <header>\n          <h1>Hello World</h1>\n        </header>\n        <section>\n          <Daily />\n          <Weekly />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}